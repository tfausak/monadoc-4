# NOTE: If you are deploying this stack for the first time, be sure to update
# the domain's name servers to point to the hosted zone's name servers.
# Otherwise changes to DNS (including certificate validation) won't work.

# NOTE: Certificates require manual validation. After creating a certificate
# with CloudFormation, you must go to the certificate manager in the AWS
# console and hit the "Create record in Route 53" button.

# NOTE: CloudFront distributions usually take about 15 minutes to update. If
# you're creating them or making a change to them, you can expect deploying to
# take at least that long.

# NOTE: The CodeBuild project requires OAuth in order to work properly. You
# only need to set it up once, but it must be done in the console rather than
# through CloudFormation.

# NOTE: CodePipeline requires a GitHub Personal Access Token to be stored in
# the Secrets Manager. This is not managed by CloudFormation and must be done
# in the console. (Secret name: GitHub. Secret key: PersonalAccessToken.)

# NOTE: RDS instances take about 10 minutes to come up. Also they require a
# master username and password to be stored in the Secrets Manager. (Secret
# name: PostgreSQL. Secret keys: MasterUsername, MasterPassword.)

Parameters:

  ApexDomain:
    Type: String
    Default: monadoc.com

  Commit:
    Type: String

  OriginDomain:
    Type: String
    Default: origin.monadoc.com

  Name:
    Type: String
    Default: monadoc

  Port:
    Type: Number
    Default: 8080

  WwwDomain:
    Type: String
    Default: www.monadoc.com

Resources:

  Vpc: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc.html
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.10.0.0/16

  PrivateSubnetA: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: us-east-1a
      CidrBlock: 10.10.0.0/24

  PrivateSubnetB: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: us-east-1b
      CidrBlock: 10.10.1.0/24

  PublicSubnetA: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: us-east-1a
      CidrBlock: 10.10.2.0/24

  PublicSubnetB: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: us-east-1b
      CidrBlock: 10.10.3.0/24

  SecurityGroup: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: allows everything
      GroupName: !Ref Name
      SecurityGroupEgress:
        CidrIp: 0.0.0.0/0
        IpProtocol: -1
        FromPort: -1
        ToPort: -1
      SecurityGroupIngress:
        CidrIp: 0.0.0.0/0
        IpProtocol: -1
        FromPort: -1
        ToPort: -1

  InternetGateway: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-internetgateway.html
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc-gateway-attachment.html
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  PublicIpA: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-eip.html
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  PublicIpB: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-eip.html
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGatewayA: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-natgateway.html
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt PublicIpA.AllocationId
      SubnetId: !Ref PublicSubnetA

  NatGatewayB: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-natgateway.html
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt PublicIpB.AllocationId
      SubnetId: !Ref PublicSubnetB

  PrivateRouteTableA: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route-table.html
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  PrivateRouteA: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      NatGatewayId: !Ref NatGatewayA
      DestinationCidrBlock: 0.0.0.0/0

  PrivateRouteTableAssociationA: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet-route-table-assoc.html
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref PrivateSubnetA

  PrivateRouteTableB: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route-table.html
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  PrivateRouteB: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      NatGatewayId: !Ref NatGatewayB
      DestinationCidrBlock: 0.0.0.0/0

  PrivateRouteTableAssociationB: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet-route-table-assoc.html
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref PrivateSubnetB

  PublicRouteTable: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route-table.html
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  PublicRoute: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: 0.0.0.0/0

  PublicRouteTableAssociationA: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet-route-table-assoc.html
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA

  PublicRouteTableAssociationB: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet-route-table-assoc.html
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB

  LoadBalancer: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-loadbalancer.html
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref Name
      SecurityGroups:
        - !Ref SecurityGroup
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB

  TargetGroup: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-targetgroup.html
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /health-check
      Name: !Ref Name
      Port: !Ref Port
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref Vpc

  HostedZone: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53-hostedzone.html
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Ref ApexDomain

  OriginRecord: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-recordset.html
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
      HostedZoneId: !Ref HostedZone
      Name: !Ref OriginDomain
      Type: A

  OriginCertificate: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-certificatemanager-certificate.html
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref OriginDomain
      ValidationMethod: DNS

  Listener: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref OriginCertificate
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-2016-08

  WwwCertificate: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-certificatemanager-certificate.html
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref WwwDomain
      ValidationMethod: DNS

  WwwDistribution: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudfront-distribution.html
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref WwwDomain
        DefaultCacheBehavior:
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          CachedMethods:
            - GET
            - HEAD
          Compress: true
          ForwardedValues:
            Cookies:
              Forward: all
            QueryString: true
          TargetOriginId: !Ref OriginDomain
          ViewerProtocolPolicy: redirect-to-https
        Enabled: true
        HttpVersion: http2
        Origins:
          - CustomOriginConfig:
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1.2
            DomainName: !Ref OriginDomain
            Id: !Ref OriginDomain
        ViewerCertificate:
          AcmCertificateArn: !Ref WwwCertificate
          MinimumProtocolVersion: TLSv1.1_2016
          SslSupportMethod: sni-only

  WwwRecord: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-recordset.html
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt WwwDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2
      HostedZoneId: !Ref HostedZone
      Name: !Ref WwwDomain
      Type: A

  ApexBucket: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket.html
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      BucketName: !Ref ApexDomain
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName: !Ref WwwDomain
          Protocol: https

  ApexCertificate: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-certificatemanager-certificate.html
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref ApexDomain
      ValidationMethod: DNS

  ApexDistribution: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudfront-distribution.html
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref ApexDomain
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: false
          TargetOriginId: !Ref ApexDomain
          ViewerProtocolPolicy: redirect-to-https
        Enabled: true
        HttpVersion: http2
        Origins:
          - CustomOriginConfig:
              OriginProtocolPolicy: http-only
            DomainName: !Select [ 1, !Split [ "//", !GetAtt ApexBucket.WebsiteURL ] ]
            Id: !Ref ApexDomain
        ViewerCertificate:
          AcmCertificateArn: !Ref ApexCertificate
          MinimumProtocolVersion: TLSv1.1_2016
          SslSupportMethod: sni-only

  ApexRecord: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-recordset.html
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt ApexDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2
      HostedZoneId: !Ref HostedZone
      Name: !Ref ApexDomain
      Type: A

  DatabaseSubnetGroup: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbsubnet-group.html
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: both private subnets
      DBSubnetGroupName: !Ref Name
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB

  Database: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-rds-database-instance.html
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      AvailabilityZone: us-east-1a
      BackupRetentionPeriod: 7
      DBInstanceClass: db.t3.micro
      DBInstanceIdentifier: !Ref Name
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      Engine: postgres
      EngineVersion: 11.6
      MasterUsername: '{{resolve:secretsmanager:PostgreSQL:SecretString:MasterUsername}}'
      MasterUserPassword: '{{resolve:secretsmanager:PostgreSQL:SecretString:MasterPassword}}'
      MonitoringInterval: 60
      # TODO: Manage this service role in CloudFormation.
      MonitoringRoleArn: arn:aws:iam::014479108335:role/rds-monitoring-role
      StorageEncrypted: true
      StorageType: gp2
      VPCSecurityGroups:
        - !Ref SecurityGroup

  Repository: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecr-repository.html
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref Name
      LifecyclePolicy:
        LifecyclePolicyText: >
          {
            "rules": [
              {
                "rulePriority": 1,
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 1000
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }

  TaskLogGroup: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref Name
      RetentionInDays: 30

  Cluster: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-cluster.html
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref Name

  TaskRole: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
            Effect: Allow
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      RoleName: !Sub '${Name}-task'

  Task: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Environment:
            - Name: monadoc_client_id
              Value: '{{resolve:secretsmanager:GitHub:SecretString:ClientId}}'
            - Name: monadoc_client_secret
              Value: '{{resolve:secretsmanager:GitHub:SecretString:ClientSecret}}'
            - Name: monadoc_commit
              Value: !Ref Commit
            - Name: monadoc_port
              Value: !Ref Port
            - Name: monadoc_url
              Value: !Sub 'https://${WwwDomain}'
            - Name: PGDATABASE
              Value: postgres
            - Name: PGHOST
              Value: !GetAtt Database.Endpoint.Address
            - Name: PGPASSWORD
              Value: '{{resolve:secretsmanager:PostgreSQL:SecretString:MasterPassword}}'
            - Name: PGPORT
              Value: !GetAtt Database.Endpoint.Port
            - Name: PGUSER
              Value: '{{resolve:secretsmanager:PostgreSQL:SecretString:MasterUsername}}'
          Essential: true
          Image: !Sub '${AWS::AccountId}.dkr.ecr.us-east-1.amazonaws.com/${Repository}:${Commit}'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: us-east-1
              awslogs-group: !Ref TaskLogGroup
              awslogs-stream-prefix: !Ref Commit
          Name: !Ref Name
          PortMappings:
            - ContainerPort: !Ref Port
      Cpu: 256
      ExecutionRoleArn: !Ref TaskRole
      Family: !Ref Name
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE

  Service: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref Cluster
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: !Ref Name
          ContainerPort: !Ref Port
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref SecurityGroup
          Subnets:
            - !Ref PrivateSubnetA
            - !Ref PrivateSubnetB
      ServiceName: !Ref Name
      TaskDefinition: !Ref Task

  MainBucket: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket.html
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref Name

  ProjectLogGroup: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '${Name}-code-build'
      RetentionInDays: 30

  ProjectRole: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
            Effect: Allow
      Policies:
        - PolicyName: default
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  - '*'
                Action:
                  - ecr:DescribeImages
                  - ecr:DescribeRepositories
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  # TODO: Tighten up these permissions.
                  - ecr:*
                  - s3:*
                Effect: Allow
      RoleName: !Sub '${Name}-code-build'

  Project: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codebuild-project.html
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Location: !Ref MainBucket
        Name: artifact
        NamespaceType: BUILD_ID
        Path: code-build/artifacts
        Type: S3
      Cache:
        Location: !Sub '${MainBucket}/code-build/cache'
        Type: S3
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:2.0
        PrivilegedMode: true
        Type: LINUX_CONTAINER
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Ref ProjectLogGroup
          Status: ENABLED
          StreamName: !Ref Commit
      Name: !Ref Name
      ServiceRole: !Ref ProjectRole
      Source:
        Auth:
          Type: OAUTH
        BuildSpec: aws/code-build.yaml
        Location: https://github.com/tfausak/monadoc.git
        ReportBuildStatus: true
        Type: GITHUB
      Triggers:
        Webhook: true

  Pipeline: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codepipeline-pipeline.html
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref MainBucket
        Type: S3
      Name: !Ref Name
      # TODO: Manage this service role in CloudFormation.
      RoleArn: arn:aws:iam::014479108335:role/service-role/AWSCodePipelineServiceRole-us-east-1-monadoc-test
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: tfausak
                Repo: monadoc
                Branch: monadoc
                OAuthToken: '{{resolve:secretsmanager:GitHub:SecretString:PersonalAccessToken}}'
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: SourceArtifact
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref Project
                PrimarySource: SourceArtifact
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ActionMode: CREATE_UPDATE
                StackName: !Ref Name
                Capabilities: CAPABILITY_IAM
                # TODO: Manage this service role in CloudFormation.
                RoleArn: arn:aws:iam::014479108335:role/monadoc-test-pipeline-cloud-formation
                TemplatePath: 'BuildArtifact::aws/cloud-formation.yaml'
                TemplateConfiguration: 'BuildArtifact::aws/configuration.json'
              InputArtifacts:
                - Name: BuildArtifact

  PipelineWebhook: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codepipeline-webhook.html
    Type: AWS::CodePipeline::Webhook
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: '{{resolve:secretsmanager:GitHub:SecretString:PersonalAccessToken}}'
      Filters:
        - JsonPath: '$.ref'
          MatchEquals: refs/heads/{Branch}
      Name: !Ref Name
      RegisterWithThirdParty: true
      TargetAction: Source
      TargetPipeline: !Ref Pipeline
      TargetPipelineVersion: !GetAtt Pipeline.Version
